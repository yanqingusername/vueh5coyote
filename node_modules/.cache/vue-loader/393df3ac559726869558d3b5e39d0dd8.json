{"remainingRequest":"/Users/user/coyote/vue-h5-template/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/coyote/vue-h5-template/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/coyote/vue-h5-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/coyote/vue-h5-template/src/pages/instrumentBind.vue?vue&type=template&id=7ab45b70&scoped=true&","dependencies":[{"path":"/Users/user/coyote/vue-h5-template/src/pages/instrumentBind.vue","mtime":1648446926763},{"path":"/Users/user/coyote/vue-h5-template/node_modules/cache-loader/dist/cjs.js","mtime":1647851357606},{"path":"/Users/user/coyote/vue-h5-template/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1647851377631},{"path":"/Users/user/coyote/vue-h5-template/node_modules/cache-loader/dist/cjs.js","mtime":1647851357606},{"path":"/Users/user/coyote/vue-h5-template/node_modules/vue-loader/lib/index.js","mtime":1647851377631}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}