{"remainingRequest":"/Users/user/coyote/vueh5coyote/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/user/coyote/vueh5coyote/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/user/coyote/vueh5coyote/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/user/coyote/vueh5coyote/src/pages/instrumentBind.vue?vue&type=template&id=7ab45b70&scoped=true&","dependencies":[{"path":"/Users/user/coyote/vueh5coyote/src/pages/instrumentBind.vue","mtime":1648872744981},{"path":"/Users/user/coyote/vueh5coyote/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/coyote/vueh5coyote/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1648870387579},{"path":"/Users/user/coyote/vueh5coyote/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/coyote/vueh5coyote/node_modules/vue-loader/lib/index.js","mtime":1648870387578}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}